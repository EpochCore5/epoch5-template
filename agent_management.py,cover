  #!/usr/bin/env python3
> """
> Agent Management System - Decentralized identifiers, registry, and monitoring
> Integrates with EPOCH5 logging, hashing, and provenance tracking
> """
  
! import json
! import uuid
! import time
! import hashlib
! import random
! from pathlib import Path
! from datetime import datetime, timezone
! from typing import Dict, List, Optional, Any
  
  # Import security and audit components if available
! try:
!     from epoch_audit import EpochAudit
!     SECURITY_SYSTEM_AVAILABLE = True
! except ImportError:
!     SECURITY_SYSTEM_AVAILABLE = False
  
  
! class AgentManager:
!     def __init__(self, base_dir: str = "./archive/EPOCH5"):
!         self.base_dir = Path(base_dir)
!         self.agents_dir = self.base_dir / "agents"
!         self.agents_dir.mkdir(parents=True, exist_ok=True)
!         self.registry_file = self.agents_dir / "registry.json"
!         self.anomalies_file = self.agents_dir / "anomalies.log"
!         self.heartbeat_file = self.agents_dir / "agent_heartbeats.log"
          
          # Initialize audit system if available
!         if SECURITY_SYSTEM_AVAILABLE:
!             self.audit_system = EpochAudit(base_dir)
!         else:
!             self.audit_system = None
  
!     def timestamp(self) -> str:
!         """Generate ISO timestamp consistent with EPOCH5"""
!         return datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
  
!     def sha256(self, data: str) -> str:
!         """Generate SHA256 hash consistent with EPOCH5"""
!         return hashlib.sha256(data.encode("utf-8")).hexdigest()
  
!     def generate_did(self, agent_type: str = "agent") -> str:
!         """Generate decentralized identifier for agent"""
!         unique_id = str(uuid.uuid4())
!         timestamp = self.timestamp()
!         did_data = f"{agent_type}|{unique_id}|{timestamp}"
!         did_hash = self.sha256(did_data)[:16]
!         return f"did:epoch5:{agent_type}:{did_hash}"
  
!     def create_agent(
!         self, skills: List[str], agent_type: str = "agent"
!     ) -> Dict[str, Any]:
!         """Create new agent with DID and initial properties"""
!         did = self.generate_did(agent_type)
!         agent = {
!             "did": did,
!             "type": agent_type,
!             "created_at": self.timestamp(),
!             "skills": skills,
!             "reliability_score": 1.0,
!             "average_latency": 0.0,
!             "total_tasks": 0,
!             "successful_tasks": 0,
!             "last_heartbeat": self.timestamp(),
!             "status": "active",
!             "metadata": {
!                 "creation_hash": self.sha256(f"{did}|{skills}|{self.timestamp()}")
!             },
!         }
  
!         self.log_heartbeat(did, "AGENT_CREATED")
!         return agent
  
!     def load_registry(self) -> Dict[str, Any]:
!         """Load agent registry from file"""
!         if self.registry_file.exists():
!             with open(self.registry_file, "r") as f:
!                 return json.load(f)
!         return {"agents": {}, "last_updated": self.timestamp()}
  
!     def save_registry(self, registry: Dict[str, Any]):
!         """Save agent registry to file"""
!         registry["last_updated"] = self.timestamp()
!         with open(self.registry_file, "w") as f:
!             json.dump(registry, f, indent=2)
  
!     def register_agent(self, agent: Dict[str, Any]) -> bool:
!         """Register agent in the registry"""
!         registry = self.load_registry()
!         registry["agents"][agent["did"]] = agent
!         self.save_registry(registry)
          
          # Log agent registration to security audit
!         if self.audit_system:
!             self.audit_system.log_event(
!                 "agent_registration",
!                 f"Agent registered: {agent['did']}",
!                 {
!                     "agent_did": agent["did"],
!                     "agent_type": agent["type"],
!                     "skills": agent["skills"],
!                     "timestamp": agent["created_at"]
!                 }
!             )
              
!         return True
  
!     def get_agent(self, did: str) -> Optional[Dict[str, Any]]:
!         """Retrieve agent by DID"""
!         registry = self.load_registry()
!         return registry["agents"].get(did)
  
!     def update_agent_stats(self, did: str, success: bool, latency: float):
!         """Update agent performance statistics"""
!         registry = self.load_registry()
!         if did in registry["agents"]:
!             agent = registry["agents"][did]
!             agent["total_tasks"] += 1
!             if success:
!                 agent["successful_tasks"] += 1
  
              # Update reliability score (weighted average)
!             agent["reliability_score"] = (
!                 agent["successful_tasks"] / agent["total_tasks"]
!             )
              
              # Apply ceiling enforcement to latency if security system is available
!             if self.audit_system:
!                 latency_result = self.audit_system.enforce_ceiling("execution_time", latency, did)
!                 if latency_result["capped"]:
!                     latency = latency_result["final_value"]
  
              # Update average latency (exponential moving average)
!             alpha = 0.1
!             agent["average_latency"] = (alpha * latency) + (
!                 (1 - alpha) * agent["average_latency"]
!             )
  
!             self.save_registry(registry)
              
              # Log stat update to security audit
!             if self.audit_system:
!                 self.audit_system.log_event(
!                     "agent_stats_update",
!                     f"Agent stats updated: {did}",
!                     {
!                         "agent_did": did,
!                         "success": success,
!                         "latency": latency,
!                         "reliability_score": agent["reliability_score"],
!                         "average_latency": agent["average_latency"],
!                         "total_tasks": agent["total_tasks"],
!                         "successful_tasks": agent["successful_tasks"]
!                     }
!                 )
                  
!             return True
!         return False
  
!     def log_heartbeat(self, did: str, status: str = "HEARTBEAT"):
!         """Log agent heartbeat with EPOCH5 compatible format"""
!         timestamp = self.timestamp()
!         with open(self.heartbeat_file, "a") as f:
!             f.write(f"{timestamp} | DID={did} | {status}\n")
  
          # Update last heartbeat in registry
!         registry = self.load_registry()
!         if did in registry["agents"]:
!             registry["agents"][did]["last_heartbeat"] = timestamp
!             self.save_registry(registry)
  
!     def detect_anomaly(self, did: str, anomaly_type: str, details: str):
!         """Log agent anomaly for monitoring"""
!         timestamp = self.timestamp()
!         anomaly = {
!             "timestamp": timestamp,
!             "did": did,
!             "type": anomaly_type,
!             "details": details,
!             "hash": self.sha256(f"{timestamp}|{did}|{anomaly_type}|{details}"),
!         }
  
!         with open(self.anomalies_file, "a") as f:
!             f.write(f"{json.dumps(anomaly)}\n")
              
          # Log anomaly to security audit
!         if self.audit_system:
!             self.audit_system.log_event(
!                 "agent_anomaly",
!                 f"Agent anomaly detected: {did} - {anomaly_type}",
!                 {
!                     "agent_did": did,
!                     "anomaly_type": anomaly_type,
!                     "details": details,
!                     "hash": anomaly["hash"]
!                 }
!             )
  
!         return anomaly
  
!     def get_active_agents(self) -> List[Dict[str, Any]]:
!         """Get list of active agents"""
!         registry = self.load_registry()
!         return [
!             agent
!             for agent in registry["agents"].values()
!             if agent["status"] == "active"
!         ]
  
!     def get_agents_by_skill(self, skill: str) -> List[Dict[str, Any]]:
!         """Get agents that have a specific skill"""
!         registry = self.load_registry()
!         return [
!             agent
!             for agent in registry["agents"].values()
!             if skill in agent["skills"] and agent["status"] == "active"
!         ]
  
  
  # CLI interface for agent management
! def main():
!     import argparse
  
!     parser = argparse.ArgumentParser(description="EPOCH5 Agent Management")
!     parser.add_argument("--create", nargs="+", help="Create agent with skills")
!     parser.add_argument("--list", action="store_true", help="List all agents")
!     parser.add_argument("--heartbeat", help="Log heartbeat for DID")
!     parser.add_argument(
!         "--anomaly", nargs=3, metavar=("DID", "TYPE", "DETAILS"), help="Log anomaly"
!     )
  
!     args = parser.parse_args()
!     manager = AgentManager()
  
!     if args.create:
!         agent = manager.create_agent(args.create)
!         manager.register_agent(agent)
!         print(f"Created agent: {agent['did']}")
!         print(f"Skills: {', '.join(agent['skills'])}")
  
!     elif args.list:
!         registry = manager.load_registry()
!         print(f"Agent Registry ({len(registry['agents'])} agents):")
!         for did, agent in registry["agents"].items():
!             print(
!                 f"  {did}: {agent['skills']} (reliability: {agent['reliability_score']:.2f})"
!             )
  
!     elif args.heartbeat:
!         manager.log_heartbeat(args.heartbeat)
!         print(f"Heartbeat logged for {args.heartbeat}")
  
!     elif args.anomaly:
!         did, anomaly_type, details = args.anomaly
!         anomaly = manager.detect_anomaly(did, anomaly_type, details)
!         print(f"Anomaly logged: {anomaly['hash']}")
  
!     else:
!         parser.print_help()
  
  
- if __name__ == "__main__":
-     main()
