name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install GitPython packaging
        
    - name: Generate release notes
      id: release-notes
      run: |
        python << 'EOF'
        import subprocess
        import re
        from datetime import datetime
        
        # Get the latest tag (previous release)
        try:
            latest_tag = subprocess.check_output(['git', 'describe', '--tags', '--abbrev=0', 'HEAD~1']).decode().strip()
        except:
            latest_tag = None
        
        # Get current version
        current_version = "${{ github.event.inputs.version || github.ref_name }}"
        
        # Generate commit log since last release
        if latest_tag:
            cmd = ['git', 'log', f'{latest_tag}..HEAD', '--pretty=format:%h %s (%an)', '--no-merges']
        else:
            cmd = ['git', 'log', '--pretty=format:%h %s (%an)', '--no-merges']
            
        commits = subprocess.check_output(cmd).decode().strip().split('\n')
        
        # Categorize commits
        features = []
        bugfixes = []
        security = []
        chores = []
        
        for commit in commits:
            if not commit.strip():
                continue
                
            commit_lower = commit.lower()
            if any(keyword in commit_lower for keyword in ['feat:', 'feature:', 'add:', 'new:']):
                features.append(f"- {commit}")
            elif any(keyword in commit_lower for keyword in ['fix:', 'bug:', 'patch:']):
                bugfixes.append(f"- {commit}")
            elif any(keyword in commit_lower for keyword in ['security:', 'sec:', 'vulnerability', 'cve']):
                security.append(f"- {commit}")
            else:
                chores.append(f"- {commit}")
        
        # Generate release notes
        release_notes = f"""# EPOCH5 Template {current_version}
        
        Released on {datetime.now().strftime('%B %d, %Y')}
        
        """
        
        if security:
            release_notes += "## 🔒 Security Updates\n\n" + "\n".join(security) + "\n\n"
            
        if features:
            release_notes += "## ✨ New Features\n\n" + "\n".join(features) + "\n\n"
            
        if bugfixes:
            release_notes += "## 🐛 Bug Fixes\n\n" + "\n".join(bugfixes) + "\n\n"
            
        if chores:
            release_notes += "## 🔧 Maintenance & Improvements\n\n" + "\n".join(chores) + "\n\n"
            
        release_notes += """
        ## 📋 System Features
        
        The EPOCH5 Template provides:
        
        - **Advanced Logging & Provenance**: Hash-chained ledger system with tamper-evident records
        - **Agent Management**: Decentralized identifiers (DIDs), registry, and real-time monitoring  
        - **Policy & Security**: Rule enforcement with quorum requirements and multi-signature approvals
        - **DAG Management**: Directed Acyclic Graph execution with fault-tolerant mechanisms
        - **Cycle Execution**: Budget control, latency tracking, and PBFT consensus
        - **Data Integrity**: Capsule storage with Merkle tree proofs and ZIP archiving
        - **Meta-Capsules**: Comprehensive system state capture and ledger integration
        
        ## 📥 Installation
        
        ```bash
        git clone https://github.com/EpochCore5/epoch5-template.git
        cd epoch5-template
        chmod +x epoch5.sh
        python3 integration.py setup-demo
        ```
        
        ## 🚀 Quick Start
        
        ```bash
        # Run the main EPOCH5 workflow
        ./epoch5.sh
        
        # Launch the ceiling management system
        ./ceiling_launcher.sh
        
        # Run integration tests
        python3 integration.py run-workflow
        ```
        
        ## 🔗 Links
        
        - [Documentation](README.md)
        - [Security Policy](SECURITY.md)
        - [Contributing Guidelines](CONTRIBUTING.md)
        """
        
        # Save to file for GitHub release
        with open('RELEASE_NOTES.md', 'w') as f:
            f.write(release_notes)
            
        print("Generated release notes successfully")
        EOF
        
    - name: Create build artifacts
      run: |
        mkdir -p release-artifacts
        
        # Create source archive
        tar -czf release-artifacts/epoch5-template-${{ github.event.inputs.version || github.ref_name }}-source.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='release-artifacts' \
          .
          
        # Create deployment package (runtime files only)
        mkdir -p deployment-package
        cp *.py deployment-package/
        cp *.sh deployment-package/
        cp *.json deployment-package/
        cp *.md deployment-package/
        cp -r .github deployment-package/
        
        tar -czf release-artifacts/epoch5-template-${{ github.event.inputs.version || github.ref_name }}-deployment.tar.gz \
          -C deployment-package .
          
        # Generate checksums
        cd release-artifacts
        sha256sum *.tar.gz > checksums.txt
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        release_name: EPOCH5 Template ${{ github.event.inputs.version || github.ref_name }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.event.inputs.version || github.ref_name, 'alpha') || contains(github.event.inputs.version || github.ref_name, 'beta') || contains(github.event.inputs.version || github.ref_name, 'rc') }}
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/epoch5-template-${{ github.event.inputs.version || github.ref_name }}-source.tar.gz
        asset_name: epoch5-template-${{ github.event.inputs.version || github.ref_name }}-source.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Deployment Package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/epoch5-template-${{ github.event.inputs.version || github.ref_name }}-deployment.tar.gz
        asset_name: epoch5-template-${{ github.event.inputs.version || github.ref_name }}-deployment.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain
        
    - name: Update package.json version
      if: github.event.inputs.version
      run: |
        VERSION=${{ github.event.inputs.version }}
        VERSION=${VERSION#v}  # Remove 'v' prefix
        npm version $VERSION --no-git-tag-version
        
    - name: Commit version bump
      if: github.event.inputs.version
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add package.json
        git commit -m "Bump version to ${{ github.event.inputs.version }}" || exit 0
        git push origin main