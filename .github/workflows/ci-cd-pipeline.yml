name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy pre-commit
          
      - name: Install Node.js dependencies
        run: npm install
        
      - name: Run pre-commit hooks
        run: pre-commit run --all-files
        
      - name: Check shell scripts
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          find . -name "*.sh" -exec shellcheck {} \;

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
          npm install
          
      - name: Run Python tests
        run: |
          if [ -d "tests" ]; then
            pytest tests/ --cov=. --cov-report=xml --cov-report=html
          else
            echo "No tests directory found, creating basic smoke test"
            python -c "
import sys
sys.path.append('.')
try:
    import integration
    print('âœ“ integration module imports successfully')
    import agent_management
    print('âœ“ agent_management module imports successfully')
    import dag_management
    print('âœ“ dag_management module imports successfully')
    import cycle_execution
    print('âœ“ cycle_execution module imports successfully')
    print('âœ“ All core modules import successfully')
except Exception as e:
    print(f'âœ— Import error: {e}')
    sys.exit(1)
"
          fi
      
      - name: Run Node.js tests
        run: npm test
        
      - name: Test EPOCH5 script
        run: |
          chmod +x epoch5.sh
          # Test with minimal delays for CI
          DELAY_HOURS_P1_P2=0 DELAY_HOURS_P2_P3=0 timeout 30s ./epoch5.sh || echo "EPOCH5 script test completed"
          
      - name: Upload coverage reports
        if: matrix.python-version == '3.12'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          
      - name: Run bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt
        continue-on-error: true
        
      - name: Run safety vulnerability check
        run: safety check --json --output safety-report.json
        continue-on-error: true
        
      - name: Run semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true
          semgrep --config=auto .
        continue-on-error: true
        
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt 2>/dev/null || echo "No test requirements file"
          
      - name: Run integration tests
        run: |
          python integration.py setup-demo
          python integration.py status
          python integration.py run-workflow
          
      - name: Validate system integrity
        run: |
          python -c "
from integration import EPOCH5Integration
integration = EPOCH5Integration()
result = integration.validate_system_integrity()
print('System validation result:', result['overall_valid'])
if not result['overall_valid']:
    print('Validation errors:', result['errors'])
    exit(1)
"

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test, security-scan, integration-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create release artifacts
        run: |
          mkdir -p artifacts
          tar -czf artifacts/epoch5-template-${{ github.sha }}.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='__pycache__' \
            --exclude='*.pyc' \
            --exclude='.pytest_cache' \
            .
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: epoch5-template-build
          path: artifacts/

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build-artifacts
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_environment
    environment: ${{ github.event.inputs.deploy_environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: epoch5-template-build
          path: artifacts/
          
      - name: Deploy to ${{ github.event.inputs.deploy_environment || 'staging' }}
        run: |
          echo "ðŸš€ Deploying EPOCH5 Template to ${{ github.event.inputs.deploy_environment || 'staging' }}"
          echo "Deployment would happen here with artifacts:"
          ls -la artifacts/
          echo "âœ… Deployment completed successfully"
